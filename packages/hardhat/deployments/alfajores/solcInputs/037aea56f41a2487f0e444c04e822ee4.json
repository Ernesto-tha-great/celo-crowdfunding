{
  "language": "Solidity",
  "sources": {
    "contracts/CrowdfundContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract CrowdCampaign {\n\n    event Launch (uint id, address indexed creator, uint goal, uint32 startAt, uint32 endAt);\n    event Cancel(uint id);\n    event Pledge(uint indexed id, address indexed caller, uint amount );\n    event Unpledge(uint indexed id, address indexed caller, uint amount );\n    event Claim(uint id);\n    event Refund(uint indexed id, address indexed caller, uint amount);\n\n    struct Campaign {\n        address creator;\n        uint goal;\n        uint pledged;\n        uint32 startAt;\n        uint32 endAt;\n        bool claimed;\n    }\n\n    IERC20 public immutable token;\n    uint public count;\n    mapping(uint => Campaign) public campaigns;\n    mapping(uint => mapping(address => uint)) public pledgedAmount;\n\n    constructor(address _token) {\n        token = IERC20(_token);\n    }\n\n\n    function launch(uint _goal, uint32 _startAt, uint32 _endAt) external {\n        require (_startAt >= block.timestamp, \"start at < now\");\n        require (_endAt >= _startAt, \"end at < startAt\");\n        require (_endAt <= block.timestamp + 90 days, \"end at > max duration\");\n\n        count += 1;\n        campaigns[count] = Campaign({\n            creator: msg.sender,\n            goal: _goal,\n            pledged: 0,\n            startAt: _startAt,\n            endAt: _endAt,\n            claimed: false\n        });\n\n        emit Launch(count, msg.sender, _goal, _startAt, _endAt);\n    }\n\n    function fetchCaampaign(uint256 _id) public view returns (\n        address creator,\n        uint goal,\n        uint pledged,\n        uint32 startAt,\n        uint32 endAt,\n        bool claimed\n    ) {\n       creator = campaigns[_id].creator;\n       goal = campaigns[_id].goal;\n       pledged = campaigns[_id].pledged;\n       startAt = campaigns[_id].startAt;\n       endAt = campaigns[_id].endAt;\n       claimed = campaigns[_id].claimed;\n    }\n\n    function cancel(uint _id) external {\n        Campaign memory campaign = campaigns[_id];\n        require(msg.sender == campaign.creator, \"not creator\");\n        require(block.timestamp < campaign.startAt, \"campaign already started\");\n        delete campaigns[_id];\n        emit Cancel(_id);\n    }\n\n    function pledge(uint _id, uint _amount) external {\n        Campaign storage campaign = campaigns[_id];\n        require(block.timestamp >= campaign.startAt, \"not started\");\n        require(block.timestamp <= campaign.endAt, \"ended\");\n\n        campaign.pledged += _amount;\n        pledgedAmount[_id][msg.sender] += _amount;\n        token.transferFrom(msg.sender, address(this), _amount);\n\n        emit Pledge(_id, msg.sender, _amount);\n\n    }\n\n    function unpledge(uint _id, uint _amount) external {\n        Campaign storage campaign = campaigns[_id];\n        require(block.timestamp <= campaign.endAt, \"ended\");\n\n        campaign.pledged -= _amount;\n        pledgedAmount[_id][msg.sender] -= _amount;\n        token.transfer(msg.sender, _amount);\n\n        emit Unpledge(_id, msg.sender, _amount);\n    }\n\n    function claim(uint _id) external {\n        Campaign storage campaign = campaigns[_id];\n        require(msg.sender == campaign.creator, \"not creator\");\n        require(block.timestamp > campaign.endAt, \"not ended\");\n        require(campaign.pledged >= campaign.goal, \"pledge is less than goal\");\n        require(!campaign.claimed, \"claimed\");\n\n        campaign.claimed = true;\n        token.transfer(msg.sender, campaign.pledged);\n\n        emit Claim(_id);\n    }\n\n    function refund(uint _id) external {\n        Campaign storage campaign = campaigns[_id];\n        require(block.timestamp > campaign.endAt, \"not ended\");\n        require(campaign.pledged < campaign.goal, \"pledge is less than goal\");\n\n        uint bal = pledgedAmount[_id][msg.sender];\n        pledgedAmount[_id][msg.sender] = 0;\n        token.transfer(msg.sender, bal);\n\n        emit Refund(_id, msg.sender, bal);\n    }\n\n\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}